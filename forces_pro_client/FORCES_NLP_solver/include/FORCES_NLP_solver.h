/*
FORCES_NLP_solver : A fast customized optimization solver.

Copyright (C) 2013-2023 EMBOTECH AG [info@embotech.com]. All rights reserved.


This software is intended for simulation and testing purposes only. 
Use of this software for any commercial purpose is prohibited.

This program is distributed in the hope that it will be useful.
EMBOTECH makes NO WARRANTIES with respect to the use of the software 
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE. 

EMBOTECH shall not have any liability for any damage arising from the use
of the software.

This Agreement shall exclusively be governed by and interpreted in 
accordance with the laws of Switzerland, excluding its principles
of conflict of laws. The Courts of Zurich-City shall have exclusive 
jurisdiction in case of any dispute.

*/

#ifndef FORCES_NLP_solver_H
#define FORCES_NLP_solver_H
/* Generated by FORCESPRO v6.3.0 on Wednesday, September 18, 2024 at 11:38:11 PM */

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#endif
#ifndef SOLVER_STRING_H
#define SOLVER_STRING_H
#include <string.h>
#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double FORCES_NLP_solver_float;
typedef double FORCES_NLP_solver_callback_float;
typedef double FORCES_NLP_solverinterface_float;
typedef int FORCES_NLP_solver_int;

#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_FORCES_NLP_solver
#define MISRA_C_FORCES_NLP_solver (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_FORCES_NLP_solver
#define RESTRICT_CODE_FORCES_NLP_solver (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_FORCES_NLP_solver
#define SET_PRINTLEVEL_FORCES_NLP_solver (0)
#endif

/* timing */
#ifndef SET_TIMING_FORCES_NLP_solver
#define SET_TIMING_FORCES_NLP_solver (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_FORCES_NLP_solver (200)	 


/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_FORCES_NLP_solver (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_FORCES_NLP_solver (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_FORCES_NLP_solver (2)

/* solver stopped externally */
#define EXIT_EXTERNAL_FORCES_NLP_solver (3)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_FORCES_NLP_solver (-6)

/* no progress in method possible */
#define NOPROGRESS_FORCES_NLP_solver (-7)

/* regularization error */
#define REGULARIZATION_ERROR_FORCES_NLP_solver (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_FORCES_NLP_solver (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_FORCES_NLP_solver (-12)

/* error in linesearch */
#define LINESEARCH_ERROR_FORCES_NLP_solver (-13)

/* thread error */
#define THREAD_FAILURE_FORCES_NLP_solver (-98)

/* locking mechanism error */
#define LOCK_FAILURE_FORCES_NLP_solver (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_FORCES_NLP_solver (-100)

/* Insufficient number of internal memory instances.
 * Increase codeoptions.max_num_mem. */
#define MEMORY_INVALID_FORCES_NLP_solver (-101)
/* Number of threads larger than specified.
 * Increase codeoptions.nlp.max_num_threads. */
#define NUMTHREADS_INVALID_FORCES_NLP_solver (-102)

/* qp solver error */
#define QP_SOLVER_FAILURE_FORCES_NLP_solver (-8)


/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
    /* vector of size 6 */
    FORCES_NLP_solver_float xinit[6];

    /* vector of size 168 */
    FORCES_NLP_solver_float x0[168];

    /* vector of size 21 */
    FORCES_NLP_solver_float all_parameters[21];

    /* scalar */
    FORCES_NLP_solver_int reinitialize;


} FORCES_NLP_solver_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
    /* column vector of length 8 */
    FORCES_NLP_solver_float x01[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x02[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x03[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x04[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x05[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x06[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x07[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x08[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x09[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x10[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x11[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x12[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x13[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x14[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x15[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x16[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x17[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x18[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x19[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x20[8];

    /* column vector of length 8 */
    FORCES_NLP_solver_float x21[8];


} FORCES_NLP_solver_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
    /* scalar: iteration number */
    solver_int32_default it;

    /* scalar: inf-norm of equality constraint residuals */
    FORCES_NLP_solver_float res_eq;

    /* scalar: norm of stationarity condition */
    FORCES_NLP_solver_float rsnorm;

    /* scalar: primal objective */
    FORCES_NLP_solver_float pobj;

    /* scalar: total solve time */
    FORCES_NLP_solver_float solvetime;

    /* scalar: time spent in function evaluations */
    FORCES_NLP_solver_float fevalstime;

    /* scalar: time spent solving inner QPs */
    FORCES_NLP_solver_float QPtime;

    /* scalar: iterations spent in solving inner QPs */
    solver_int32_default QPit;

    /* scalar: last exitflag of inner QP solver */
    solver_int32_default QPexitflag;

    /* column vector of length 8: solver ID of FORCESPRO solver */
    solver_int32_default solver_id[8];


} FORCES_NLP_solver_info;

/* MEMORY STRUCT --------------------------------------------------------*/
typedef struct FORCES_NLP_solver_mem FORCES_NLP_solver_mem;
#ifdef __cplusplus
extern "C" {
#endif
/* MEMORY STRUCT --------------------------------------------------------*/
extern FORCES_NLP_solver_mem * FORCES_NLP_solver_external_mem(void * mem_ptr, solver_int32_unsigned i_mem, size_t mem_size);
extern size_t FORCES_NLP_solver_get_mem_size( void );
extern size_t FORCES_NLP_solver_get_const_size( void );
#ifdef __cplusplus
}
#endif

/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Wednesday, September 18, 2024 11:38:12 PM */
/* User License expires on: (UTC) Sunday, December 15, 2024 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Sunday, December 15, 2024 10:00:00 PM (approx.) */
/* Solver Id: be687316-5852-432d-920b-406a509e0991 */
/* Host Compiler Version: d76500f0 */
/* Target Compiler Version: unused */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef solver_int32_default(*FORCES_NLP_solver_extfunc)(FORCES_NLP_solver_float* x, FORCES_NLP_solver_float* y, FORCES_NLP_solver_float* lambda, FORCES_NLP_solver_float* params, FORCES_NLP_solver_float* pobj, FORCES_NLP_solver_float* g, FORCES_NLP_solver_float* c, FORCES_NLP_solver_float* Jeq, FORCES_NLP_solver_float* h, FORCES_NLP_solver_float* Jineq, FORCES_NLP_solver_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default FORCES_NLP_solver_solve(FORCES_NLP_solver_params *params, FORCES_NLP_solver_output *output, FORCES_NLP_solver_info *info, FORCES_NLP_solver_mem *mem, FILE *fs, FORCES_NLP_solver_extfunc evalextfunctions_FORCES_NLP_solver);

/*Integrator declarations */
typedef const solver_int32_default* (*cDynJacXsparsity)( solver_int32_default i );
typedef const solver_int32_default* (*cDynJacUsparsity)( solver_int32_default i );
typedef solver_int32_default (*fConDynamics)( const FORCES_NLP_solver_callback_float** arg, FORCES_NLP_solver_callback_float** res, solver_int32_default* iw, FORCES_NLP_solver_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacStateDynamics)( const FORCES_NLP_solver_callback_float** arg, FORCES_NLP_solver_callback_float** res, solver_int32_default* iw, FORCES_NLP_solver_callback_float* w, solver_int32_default mem );
typedef solver_int32_default (*fConJacInputDynamics)( const FORCES_NLP_solver_callback_float** arg, FORCES_NLP_solver_callback_float** res, solver_int32_default* iw, FORCES_NLP_solver_callback_float* w, solver_int32_default mem );

void FORCES_NLP_solver_rkfour_0(const FORCES_NLP_solver_callback_float * const z, const FORCES_NLP_solver_callback_float * const p, FORCES_NLP_solver_float * const c, FORCES_NLP_solver_float * const jacc,
            fConDynamics cDyn0rd, fConDynamics cDyn, const solver_int32_default threadID);






#ifdef __cplusplus
}
#endif

#endif
